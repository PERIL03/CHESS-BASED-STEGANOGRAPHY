{"ast":null,"code":"var _jsxFileName = \"/Users/rishuraj/Desktop/ROOKHIDE/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport CoinbaseWalletSDK from '@coinbase/wallet-sdk';\nimport './App.css';\n\n// Components\nimport Header from './components/Header';\nimport Home from './components/Home';\nimport Encode from './components/Encode';\nimport Decode from './components/Decode';\nimport ChessVisualizer from './components/ChessVisualizer';\nimport WalletConnect from './components/WalletConnect';\n\n// Initialize Coinbase Wallet SDK\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst APP_NAME = 'Chess Steganography DApp';\nconst APP_LOGO_URL = 'https://example.com/logo.png';\nconst DEFAULT_ETH_JSONRPC_URL = 'https://mainnet.infura.io/v3/YOUR_INFURA_KEY';\nconst DEFAULT_CHAIN_ID = 1;\nconst coinbaseWallet = new CoinbaseWalletSDK({\n  appName: APP_NAME,\n  appLogoUrl: APP_LOGO_URL,\n  darkMode: false\n});\nconst ethereum = coinbaseWallet.makeWeb3Provider(DEFAULT_ETH_JSONRPC_URL, DEFAULT_CHAIN_ID);\nfunction App() {\n  _s();\n  const [walletConnected, setWalletConnected] = useState(false);\n  const [walletAddress, setWalletAddress] = useState('');\n  const [sessionToken, setSessionToken] = useState('');\n  useEffect(() => {\n    // Check if wallet was previously connected\n    const savedAddress = localStorage.getItem('walletAddress');\n    const savedToken = localStorage.getItem('sessionToken');\n    if (savedAddress && savedToken) {\n      setWalletAddress(savedAddress);\n      setSessionToken(savedToken);\n      setWalletConnected(true);\n    }\n  }, []);\n  const connectWallet = async () => {\n    try {\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      if (accounts.length > 0) {\n        const address = accounts[0];\n\n        // Sign a message to verify wallet ownership\n        const message = `Connect to Chess Steganography DApp at ${new Date().toISOString()}`;\n        const signature = await ethereum.request({\n          method: 'personal_sign',\n          params: [message, address]\n        });\n\n        // Send to backend for verification\n        const response = await fetch('http://localhost:8000/api/wallet/connect', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            wallet_address: address,\n            signature: signature,\n            message: message\n          })\n        });\n        const data = await response.json();\n        if (data.success) {\n          setWalletAddress(address);\n          setSessionToken(data.session_token);\n          setWalletConnected(true);\n\n          // Save to localStorage\n          localStorage.setItem('walletAddress', address);\n          localStorage.setItem('sessionToken', data.session_token);\n        } else {\n          alert('Wallet connection failed: ' + data.error);\n        }\n      }\n    } catch (error) {\n      console.error('Wallet connection error:', error);\n      alert('Failed to connect wallet');\n    }\n  };\n  const disconnectWallet = () => {\n    setWalletConnected(false);\n    setWalletAddress('');\n    setSessionToken('');\n    localStorage.removeItem('walletAddress');\n    localStorage.removeItem('sessionToken');\n  };\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App min-h-screen bg-gray-100\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        walletConnected: walletConnected,\n        walletAddress: walletAddress,\n        onConnect: connectWallet,\n        onDisconnect: disconnectWallet\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"container mx-auto px-4 py-8\",\n        children: /*#__PURE__*/_jsxDEV(Routes, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 38\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/encode\",\n            element: /*#__PURE__*/_jsxDEV(Encode, {\n              walletAddress: walletAddress,\n              sessionToken: sessionToken,\n              walletConnected: walletConnected\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/decode\",\n            element: /*#__PURE__*/_jsxDEV(Decode, {\n              walletAddress: walletAddress,\n              sessionToken: sessionToken,\n              walletConnected: walletConnected\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/visualizer\",\n            element: /*#__PURE__*/_jsxDEV(ChessVisualizer, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 48\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/wallet\",\n            element: /*#__PURE__*/_jsxDEV(WalletConnect, {\n              walletConnected: walletConnected,\n              walletAddress: walletAddress,\n              onConnect: connectWallet,\n              onDisconnect: disconnectWallet\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"RvEoT46hLAI2tOiuRLlU5OnjAbQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","CoinbaseWalletSDK","Header","Home","Encode","Decode","ChessVisualizer","WalletConnect","jsxDEV","_jsxDEV","APP_NAME","APP_LOGO_URL","DEFAULT_ETH_JSONRPC_URL","DEFAULT_CHAIN_ID","coinbaseWallet","appName","appLogoUrl","darkMode","ethereum","makeWeb3Provider","App","_s","walletConnected","setWalletConnected","walletAddress","setWalletAddress","sessionToken","setSessionToken","savedAddress","localStorage","getItem","savedToken","connectWallet","accounts","request","method","length","address","message","Date","toISOString","signature","params","response","fetch","headers","body","JSON","stringify","wallet_address","data","json","success","session_token","setItem","alert","error","console","disconnectWallet","removeItem","children","className","onConnect","onDisconnect","fileName","_jsxFileName","lineNumber","columnNumber","path","element","_c","$RefreshReg$"],"sources":["/Users/rishuraj/Desktop/ROOKHIDE/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport CoinbaseWalletSDK from '@coinbase/wallet-sdk';\nimport './App.css';\n\n// Components\nimport Header from './components/Header';\nimport Home from './components/Home';\nimport Encode from './components/Encode';\nimport Decode from './components/Decode';\nimport ChessVisualizer from './components/ChessVisualizer';\nimport WalletConnect from './components/WalletConnect';\n\n// Initialize Coinbase Wallet SDK\nconst APP_NAME = 'Chess Steganography DApp';\nconst APP_LOGO_URL = 'https://example.com/logo.png';\nconst DEFAULT_ETH_JSONRPC_URL = 'https://mainnet.infura.io/v3/YOUR_INFURA_KEY';\nconst DEFAULT_CHAIN_ID = 1;\n\nconst coinbaseWallet = new CoinbaseWalletSDK({\n  appName: APP_NAME,\n  appLogoUrl: APP_LOGO_URL,\n  darkMode: false\n});\n\nconst ethereum = coinbaseWallet.makeWeb3Provider(DEFAULT_ETH_JSONRPC_URL, DEFAULT_CHAIN_ID);\n\nfunction App() {\n  const [walletConnected, setWalletConnected] = useState(false);\n  const [walletAddress, setWalletAddress] = useState('');\n  const [sessionToken, setSessionToken] = useState('');\n\n  useEffect(() => {\n    // Check if wallet was previously connected\n    const savedAddress = localStorage.getItem('walletAddress');\n    const savedToken = localStorage.getItem('sessionToken');\n    \n    if (savedAddress && savedToken) {\n      setWalletAddress(savedAddress);\n      setSessionToken(savedToken);\n      setWalletConnected(true);\n    }\n  }, []);\n\n  const connectWallet = async () => {\n    try {\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n      \n      if (accounts.length > 0) {\n        const address = accounts[0];\n        \n        // Sign a message to verify wallet ownership\n        const message = `Connect to Chess Steganography DApp at ${new Date().toISOString()}`;\n        const signature = await ethereum.request({\n          method: 'personal_sign',\n          params: [message, address],\n        });\n        \n        // Send to backend for verification\n        const response = await fetch('http://localhost:8000/api/wallet/connect', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            wallet_address: address,\n            signature: signature,\n            message: message\n          })\n        });\n        \n        const data = await response.json();\n        \n        if (data.success) {\n          setWalletAddress(address);\n          setSessionToken(data.session_token);\n          setWalletConnected(true);\n          \n          // Save to localStorage\n          localStorage.setItem('walletAddress', address);\n          localStorage.setItem('sessionToken', data.session_token);\n        } else {\n          alert('Wallet connection failed: ' + data.error);\n        }\n      }\n    } catch (error) {\n      console.error('Wallet connection error:', error);\n      alert('Failed to connect wallet');\n    }\n  };\n\n  const disconnectWallet = () => {\n    setWalletConnected(false);\n    setWalletAddress('');\n    setSessionToken('');\n    localStorage.removeItem('walletAddress');\n    localStorage.removeItem('sessionToken');\n  };\n\n  return (\n    <Router>\n      <div className=\"App min-h-screen bg-gray-100\">\n        <Header \n          walletConnected={walletConnected}\n          walletAddress={walletAddress}\n          onConnect={connectWallet}\n          onDisconnect={disconnectWallet}\n        />\n        \n        <main className=\"container mx-auto px-4 py-8\">\n          <Routes>\n            <Route path=\"/\" element={<Home />} />\n            <Route \n              path=\"/encode\" \n              element={\n                <Encode \n                  walletAddress={walletAddress}\n                  sessionToken={sessionToken}\n                  walletConnected={walletConnected}\n                />\n              } \n            />\n            <Route \n              path=\"/decode\" \n              element={\n                <Decode \n                  walletAddress={walletAddress}\n                  sessionToken={sessionToken}\n                  walletConnected={walletConnected}\n                />\n              } \n            />\n            <Route path=\"/visualizer\" element={<ChessVisualizer />} />\n            <Route \n              path=\"/wallet\" \n              element={\n                <WalletConnect \n                  walletConnected={walletConnected}\n                  walletAddress={walletAddress}\n                  onConnect={connectWallet}\n                  onDisconnect={disconnectWallet}\n                />\n              } \n            />\n          </Routes>\n        </main>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}